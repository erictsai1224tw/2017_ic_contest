```graphviz
digraph FSM_2017_ic_design_top {
	rankdir=LR;
	size="10,8"
	node [shape = point]; begin;
	node [shape = circle]; Initial "Forward\nPass" "Backward\nPass" Finish;
	begin -> Initial [label="reset"];
	Initial -> Initial [label = "not done | reset"];
    Initial -> "Forward\nPass" [label = "done"];
    "Forward\nPass"->"Forward\nPass"[label = "not done"];
    "Forward\nPass"->"Backward\nPass"[label = "done"];
    "Backward\nPass"-> Initial [rankdir=RL, label = "reset", constraint=false];
    "Forward\nPass"-> Initial [rankdir=RL, label = "\n\nreset", constraint=false];
    "Backward\nPass"->"Backward\nPass"[label = "not done"];
    "Backward\nPass"->Finish[label = "done"];
    Finish-> Initial [rankdir=RL, label = "reset", constraint=false];
    Finish->Finish[];

}
```
digraph FSM_2017_ic_design_initial {
	rankdir=LR;
	size="10,8"
	node [shape = point]; begin;
	node [shape = circle]; //Initial "Forward\nPass" "Backward\nPass" Finish;
	a [label="Initial"];
	b [label = "Send Addr\nto ROM"];
	c [label= "Read Data\nfrom ROM"];
	d [label="Send Data\nto RAM"];
	h [label="Send Data\nto RAM_0"];
	e [label="Check\nFinish"];
	f [label="Initial\nDone"];
	begin -> a [label="reset==0"];
	a->a[label="reset==0"];
	a->b[label="reset==1"];
	b->c;
	c->h;
	h->d;
	d->d[label="buffer_addr!=15"];
	d->e[label="buffer_addr==15"];
	e->f[label="addr_to_ROM==1023"];
	e->b[label="addr_to_ROM!=1023", constraint=false];

}


digraph FSM_2017_ic_design_initial_buffer_addr {
	rankdir=LR;
	size="10,8"
	//node [shape = point]; begin;
	node [shape = circle]; //Initial "Forward\nPass" "Backward\nPass" Finish;
	a [label="buffer_addr=0"];
	b [label="buffer_addr++"];
	a->b[label="State==Send Data to RAM"];
	b->b[label="buffer_addr!=15"];
	b->a[label="\n\n\nbuffer_addr==15"];

}


digraph FSM_2017_ic_design_initial_ROM_addr {
	rankdir=LR;
	size="10,8"
	node [shape = point]; begin;
	node [shape = circle]; //Initial "Forward\nPass" "Backward\nPass" Finish;
	a [label="buffer_addr=0"];
	b [label="buffer_addr++"];
	begin->a;
	a->b[label="State==Send Data to RAM"];
	b->b[label="buffer_addr!=15"];
	b->a[label="\n\n\nbuffer_addr==15"];

}

digraph FSM_2017_ic_design_fp {
	rankdir=LR;
	size="10,8"
	node [shape = point]; begin;
	node [shape = circle]; //Initial "Forward\nPass" "Backward\nPass" Finish;
	a [label="Initial"];
	b [label = "Send Addr\nto RAM"];
	c [label= "Check Data \nfrom RAM=1"];
	d [label="Send NW addr\nto RAM"];
    e [label="Send N addr\nto RAM/\nload NW"];
    f [label="Send NE addr\nto RAM/\nload N"];
    g [label="Send W addr\nto RAM/\nload NE"];
    h [label="load W/\nWrite to RAM"];
    i [label="check RAM addr"];
    j [label="FP done"];
    {rank=same;e;f;};
	begin -> a;
	a->a[label=" reset==0"];
	a->b[label=" reset==1"];
	b->c;
	c->i[label="Data=0", constraint=false];
	c->d[label="Data=1"];
	d->e;
	e->f[rankdir="TB"];
	j->i[label="Addr>128*126+126", dir=back];
	i->h->g->f[dir=back];
	i->b:sw[label="Addr<=128*126+126", constraint=false];

}

digraph FSM_2017_ic_design_fp_addr_RAM {
	rankdir=LR;
	size="10,8"
	node [shape = point]; begin;
	node [shape = circle]; //Initial "Forward\nPass" "Backward\nPass" Finish;
	a [label="state=Initial/\naddr=129"];
	b [label = "state!=check RAM addr\n"];
	c [label= "state=check RAM addr\n"];
	d [label="state=Done/\nAddr=128*127-1"];

	begin -> a ->b;
	b->c[label="next_state=check RAM addr"];
	b->b[label="next_state!=check RAM addr"];
	c:nw->b[label="(addr-126)%128==0/\naddr+3"];
	c:sw->b[label="(addr-126)%128!=0/\naddr+1"];
	c->d[label="addr==128*126+126"];

}
